
#+TITLE: Minimal Emacs Config
:PROPERTIES:
#+AUTHOR: adrsha
#+PROPERTY: header-args :results silent  :tangle ./init.el
:END:

* TODO for configs [0/5]
** TODO Checkout lsp-mode
** TODO Try out dap-mode
** TODO Try org-fc
** TODO Setup iedit


* Early Init
Starting in Emacs 27 the early-init.el file is run before the GUI is created, so we take care of a few miscelleneous GUI features. Keeps ugliness down and should help startup time, too.

** Initiation
Setting up the early init file with lexical binding.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  ;; -*- lexical-binding: t; -*-

  ;; -------------------------------------------------------------------------------- ;;
  ;; This early-init.el file was auto-tangled from an orgmode file. (C) adrsha        ;;
  ;; -------------------------------------------------------------------------------- ;;

#+END_SRC

** Cleanup

Remove modeline.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq-default mode-line-format nil)
#+END_SRC

No start up screen.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq inhibit-startup-screen t)
#+END_SRC

Prevent messages from the server during startup from displaying.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq server-client-instructions nil)
#+END_SRC

No echo area message during startup.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el
  
  (setq inhibit-startup-echo-area-message t)
#+END_SRC

No message in scratch buffer
	
#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq initial-scratch-message nil)
#+END_SRC

No Initial buffer, i.e. make initial buffer the scratch buffer.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq initial-buffer-choice nil)
#+END_SRC

No title frame.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq frame-title-format nil)
#+END_SRC

No dialog boxes to ask for files.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq use-file-dialog nil)
#+END_SRC

No dialog boxes for mouse commands like =yes-or-no= prompts.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq use-dialog-box nil)
#+END_SRC

No popup windows (this variable exists for backwards compatibility).

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq pop-up-windows nil)
#+END_SRC

No indications for empty lines.
	
#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq indicate-empty-lines nil)
#+END_SRC

No cursor in inactive windows.
	
#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq-default cursor-in-non-selected-windows nil)
#+END_SRC

No scroll bars.
	
#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (if (fboundp 'scroll-bar-mode) (set-scroll-bar-mode nil))
#+END_SRC

No toolbars at all.
	
#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
#+END_SRC

No menu bar.
	
#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (menu-bar-mode -1)
#+END_SRC

No ~TAB~ characters.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq-default indent-tabs-mode nil)
#+END_SRC

No syntax highlights. =DISABLED=

#+BEGIN_SRC emacs-lisp  :tangle ./early-init.el

  ;; (setq font-lock-maximum-decoration nil)
#+END_SRC

No limit on font lock. (tree style levels)

#+BEGIN_SRC emacs-lisp  :tangle ./early-init.el

  (setq-default font-lock-maximum-size nil)
#+END_SRC

No Blinking cursor.

#+BEGIN_SRC emacs-lisp  :tangle ./early-init.el

  (blink-cursor-mode -1)
#+END_SRC

No hover descriptions in minibuffer.

#+BEGIN_SRC emacs-lisp  :tangle ./early-init.el

  (global-eldoc-mode -1)
#+END_SRC

** Warnings

List of warnings that the byte-compiler should issue. 

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  ;; (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
  (setq byte-compile-warnings 'nil)

#+END_SRC

Silence compiler warnings as they can be pretty disruptive.

#+BEGIN_SRC emacs-lisp :early-init.el
  
  (if (boundp 'comp-deferred-compilation)
      (setq-default comp-deferred-compilation nil)
    (setq-default native-comp-deferred-compilation nil))

  (setq-default native-comp-async-report-warnings-errors nil)

  ;; Display Minimum warnings
  (setq-default warning-minimum-level :emergency)

#+END_SRC

** Optimizations

Garbage Collections along with the package gcmh and setting up file specific commands.

#+BEGIN_SRC emacs-lisp  :tangle ./early-init.el

  ;; From https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/
  (setq gc-cons-threshold-original gc-cons-threshold)
  (setq gc-cons-threshold (* 1024 1024 100))

  ;; Set file-name-handler-alist
  ;; Also from https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/
  (setq file-name-handler-alist-original file-name-handler-alist)
  (setq file-name-handler-alist nil)

  ;; Restore them after a certain time
  (run-with-idle-timer
   3 nil
   (lambda ()
     (setq gc-cons-threshold gc-cons-threshold-original)
     (setq file-name-handler-alist file-name-handler-alist-original)
     (makunbound 'gc-cons-threshold-original)
     (makunbound 'file-name-handler-alist-original)
     (message "gc-cons-threshold and file-name-handler-alist restored")))

#+END_SRC

Removing wayland input lags.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq-default pgtk-wait-for-event-timeout 0)
#+END_SRC

Disable resizing in order preserve no of columns and lines in display.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el
  
  (setq frame-inhibit-implied-resize t) ;; Supposed to hasten startup
#+END_SRC

Idle time delay before updating various things on the screen.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq idle-update-delay 1.0)
#+END_SRC

Explicitly define a width to reduce the cost of on-the-fly computation

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el
  
  (setq-default display-line-numbers-width 3)
#+END_SRC

Disabling bidi (bidirectional editing stuff).

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el
  
  (setq-default bidi-display-reordering 'left-to-right 
                bidi-paragraph-direction 'left-to-right)
#+END_SRC

Accelerate scrolling.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq fast-but-imprecise-scrolling t)
#+END_SRC

Accelerate scrolling.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el
  
  ;; In noninteractive sessions, prioritize non-byte-compiled source files to
  ;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
  ;; to skip the mtime checks on every *.elc file.
  (setq-default load-prefer-newer noninteractive)
#+END_SRC

** Manage backups
Keep all backups in ~tmp/backups/~ instead of cluttering the file system.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el
  
  ;; File syntax: DEMO.el~
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
#+end_src
	
** Manage Autosaves
Keep all autosaves in ~tmp/auto-saves/~ for the same reason.
	
#+BEGIN_SRC emacs-lisp :tangle ./early-init.el
  
  ;; File syntax #DEMO.el#

  ;; auto-save-mode doesn't create the path automatically!
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory) ; prefix for generating autosave list file name
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
#+end_src
	
** Creating Lockfiles =DISABLED=
Preventing lock files from being created. The ~create-lockfiles~ option is used to protect file from being edited by another emacs session while its unsaved
	
#+BEGIN_SRC emacs-lisp :tangle ./early-init.el
  
  ;; For #DEMO.el
  ;; (setq create-lockfiles nil)
#+END_SRC

** User Directory
The default directory to store packages and other files related to emacs.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq user-emacs-directory (expand-file-name "~/.cache/emacs"))
#+END_SRC

** Recentf
Directory to store the recent files list.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq-default recentf-save-file "~/.cache/emacs/recentf")
#+END_SRC

** Preferences

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  ;; No confirmation for visiting non-existent files
  (setq-default confirm-nonexistent-file-or-buffer nil)

  ;; Use RET to open org-mode links, including those in quick-help.org
  (setq-default org-return-follows-link t)

  ;; Enable recentf
  (require 'recentf)
  (recentf-mode 1)

  ;; Save my last place
  (save-place-mode 1)

  ;; Move customization variables to a separate file and load it
  (setq-default custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)

  ;; Autosave true
  (setq-default auto-save-default t)

  ;; ease of life
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq-default delete-by-moving-to-trash t); Delete files to trash
  (setq-default delete-selection-mode t)

  ;; (setq max-mini-window-height 1) ; Don't let echo area grow;;
  (setq resize-mini-windows t) 

  ;; disable the delays
  (setq-default show-paren-delay 0.0)
  (setq-default eldoc-idle-delay 0.0)
  (setq-default highlight-indent-guides-delay 0.01)

  ;; Disable default css colors
  (setq-default css-fontify-colors nil)

  ;; Auto executable if consists a shebang
  (add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

** Org Mode

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  ;; This HAS to come before (require 'org)
  (setq org-emphasis-regexp-components
        '("     ('\"{“”"
          "-   .,!?;''“”\")}/\\“”"
          "    \r\n,"
          "."
          1))
#+END_SRC

** Evil precursor
It is necessary to do this before setting the evil keybindings. It checks whether to allow other default evil keybindings for evil and other modes.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  (setq evil-want-keybinding nil)

#+END_SRC

** Ending early init

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  ;; -------------------------------------------------------------------------------- ;;
  ;; Completed early-init.el
  ;; -------------------------------------------------------------------------------- ;;

#+END_SRC



* Options
Options to load after emacs has started.

** Initiation
Setting up the init file with lexical binding.

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  ;; -*- lexical-binding: t; -*-

  ;; -------------------------------------------------------------------------------- ;;
  ;; This init.el file was auto-tangled from an orgmode file. (C) adrsha              ;;
  ;; -------------------------------------------------------------------------------- ;;

#+END_SRC

** Buffer UI

Display line numbers globally

#+BEGIN_SRC emacs-lisp 

  (global-display-line-numbers-mode t)
#+END_SRC

Then disable them for a few modes.

#+BEGIN_SRC emacs-lisp 

  (dolist (mode '(org-mode-hook org-agenda-mode term-mode-hook dired-mode-hook shell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

Enable lines being truncated.

#+BEGIN_SRC emacs-lisp 

  (set-default 'truncate-lines t)
#+END_SRC

Disable most messages in echo area. Doesnt work if enabled before starting the GUI.

#+BEGIN_SRC emacs-lisp 

  (setq-default inhibit-message nil)
#+END_SRC


Don't break line as I'm typing.

#+BEGIN_SRC emacs-lisp 

  (setq-default auto-fill-mode nil)
#+END_SRC

Better autofill ->  is nil by default

#+BEGIN_SRC emacs-lisp 

  ;; (setq refill-mode nil)
#+END_SRC

Enable auto revert globally. Autorevert allows buffers to change when the underlining file has changed.

#+BEGIN_SRC emacs-lisp 

  (global-auto-revert-mode 1)
#+END_SRC

Do the same for Dired and other non file buffers.

#+BEGIN_SRC emacs-lisp 

  ;; Revert Dired and other buffers
  (setq-default global-auto-revert-non-file-buffers t)
#+END_SRC

Setting some default frame settings. For border and cursors.

#+BEGIN_SRC emacs-lisp 

  (add-to-list 'default-frame-alist '(internal-border-width . 10 ))
  (add-to-list 'default-frame-alist '(internal-show-cursor . -1))
#+END_SRC

Disable the line break symbols in fringes.

#+BEGIN_SRC emacs-lisp 

  (setf (cdr (assq 'continuation fringe-indicator-alist)) '(nil nil))
#+END_SRC

Replace the truncation symbols for file buffers with truncation enabled. (Doesn't work for org-mode)

#+BEGIN_SRC emacs-lisp 
  
  (set-display-table-slot standard-display-table 0 ?\ ) 
#+END_SRC

To disable buttons for checkboxes

#+BEGIN_SRC emacs-lisp

  (setq-default widget-image-enable nil)
#+END_SRC

Remove the headerlines from org src and capture buffers.

#+BEGIN_SRC emacs-lisp
  
  (add-hook 'org-src-mode-hook '(lambda () (interactive) (setq header-line-format 'nil)))
  (add-hook 'org-capture-mode-hook '(lambda () (interactive) (setq header-line-format 'nil)))
#+END_SRC

** Scroll
Scroll when cursor is before last 2 lines.

#+BEGIN_SRC emacs-lisp 

  (setq-default scroll-margin 2 )
#+END_SRC

When you scroll down, and up again, point should end up at the same position you started out with.
	
#+BEGIN_SRC emacs-lisp 

  (setq scroll-preserve-screen-position t)
  (setq auto-window-vscroll nil)
#+END_SRC

Line wise scroll.
	
#+BEGIN_SRC emacs-lisp

  (setq-default scroll-step 1)
#+END_SRC

Whether to recenter cursor on scroll. If the value is greater than 100, it wont.

#+BEGIN_SRC emacs-lisp

  (customize-set-variable 'scroll-conservatively 101)
#+end_src

** Indent
Prevent ~TAB~ from inserting ~\t~ characters.

#+BEGIN_SRC emacs-lisp 
  
  (setq-default indent-tabs-mode nil)
#+END_SRC

Dont run =completion-at-point= and only indent the line on pressing ~TAB~.

#+BEGIN_SRC emacs-lisp 
  
  (setq tab-always-indent 't)
#+END_SRC

Default number of spaces inserted by ~TAB~.
	
#+BEGIN_SRC emacs-lisp 

  (setq-default tab-width 2)
#+END_SRC

C specific indentation style.
	
#+BEGIN_SRC emacs-lisp
  
  (setq c-default-style "linux"
        c-basic-offset 'tab-width)
#+END_SRC

** Suppressing Messages
*** Suppress EOB and BOBs

#+BEGIN_SRC emacs-lisp 

  (defun my-command-error-function (data context caller)
    "Ignore the buffer-read-only, beginning-of-buffer,
   end-of-buffer signals; pass the rest to the default handler."
    (when (not (memq (car data) '(buffer-read-only
                                  beginning-of-buffer
                                  end-of-buffer)))
      (command-error-default-function data context caller)))

  (setq command-error-function #'my-command-error-function)
#+END_SRC

*** Suppress on Events

#+BEGIN_SRC emacs-lisp 

  (defun suppress-message-advice-around (fun &rest args)
    (let (message-log-max)
      (with-temp-message (or (current-message) "")
        (apply fun args))))

  ;; example: suppress any messages from `save-buffer'
  (advice-add 'save-buffer :around 'suppress-message-advice-around)
  (advice-add 'kill-buffer :around 'suppress-message-advice-around)

  ;; Disable echoing keystrokes
  (setq-default echo-keystrokes 0.025)

  ;; Disable Evil Modes information
  (setq-default evil-echo-state nil)
#+END_SRC

** Ending init

#+BEGIN_SRC emacs-lisp :tangle ./early-init.el

  ;; -------------------------------------------------------------------------------- ;;
  ;; Completed init.el                                                                ;;
  ;; -------------------------------------------------------------------------------- ;;

#+END_SRC



* Custom Tokens
** Variables

#+BEGIN_SRC emacs-lisp

  (defvar bgcolor "#11111b"
    "The normal background of emacs.")
  (defvar grim-bgcolor "#14141f"
    "The darker background of emacs.")
  (defvar darker-bgcolor "#0D0D15"
    "The darker background of emacs.")
  (defvar darkest-bgcolor "#0B0B11"
    "The darker background of emacs.")
  (defvar dim-fgcolor "#6C7096"
    "The calm foreground of emacs.")
  (defvar calm-fgcolor "#BAC2DE"
    "The calm foreground of emacs.")
  (defvar mauve-color "#cba6f7"
    "The blue color for emacs.")
  (defvar lavender-color "#b4befe"
    "The blue color for emacs.")
  (defvar blue-color "#90b6f3"
    "The blue color for emacs.")
  (defvar pink-color "#cba6f7"
    "The pink color for emacs.")
  (defvar red-color "#f38ba8"
    "The red color for emacs.")
  (defvar orange-color "#fab387"
    "The red color for emacs.")
  (defvar teal-color "#a6e3a1"
    "The pink color for emacs.")
  (defvar grim-fgcolor "#232338"
    "The calm foreground of emacs.")
#+END_SRC

** Faces

#+BEGIN_SRC emacs-lisp

  (defface minibuffer-face
    '((t :font "Barlow SemiCondensed"
         :height 170
         :foreground "#BAC2DE"
         ))
    "Face for minibuffer."
    :group 'minibuffer )

#+END_SRC

** Functions
Delete window or frame accordingly to prevent the =Attempt to delete a...= message.

#+BEGIN_SRC emacs-lisp

  (defun delete-window-or-frame (&optional window frame force)
    (interactive)
    (if (= 1 (length (window-list frame)))
        (delete-frame frame force)
      (delete-window window)))
#+END_SRC

The ~CTRL-L~ function.

#+BEGIN_SRC emacs-lisp
  (defun clear ()
    (interactive)
    (evil-ex-nohighlight)
    (iedit--quit)
    ;; (redraw-display)
    (posframe-hide-all)
    ;; (evil-mc-undo-all-cursors)
    (evil-force-normal-state)
    )
#+END_SRC

To prevent the evil escape key from impacting the visual mode.

#+BEGIN_SRC emacs-lisp
  
  (defun configure-evil-ins ()
    "Default evil ins key"
    (evil-escape-mode 1))
  (add-hook 'evil-insert-state-entry-hook #'configure-evil-ins)
  (add-hook 'minibuffer-mode-hook #'(lambda () (interactive) (evil-escape-mode 1) ))

  (defun configure-evil-exit-ins ()
    "Default evil ins key"
    (evil-escape-mode -1))
  (add-hook 'evil-visual-state-entry-hook #'configure-evil-exit-ins)
#+END_SRC

Cleaner buffer traversal.

#+BEGIN_SRC emacs-lisp

  (defcustom my-skippable-buffer-regexp
    (rx bos (or "*Messages*" "*scratch*" "*Help*") eos)
    "Matching buffer names are ignored by `my-next-buffer'
    and `my-previous-buffer'."
    :type 'regexp)

  (defun my-change-buffer (change-buffer)
    "Call CHANGE-BUFFER until `my-skippable-buffer-regexp' doesn't match."
    (let ((initial (current-buffer)))
      (funcall change-buffer)
      (let ((first-change (current-buffer)))
        (catch 'loop
          (while (string-match-p my-skippable-buffer-regexp (buffer-name))
            (funcall change-buffer)
            (when (eq (current-buffer) first-change)
              (switch-to-buffer initial)
              (throw 'loop t)))))))

  (setq my-skippable-buffer-regexp
        (rx bos (or (or "*Messages*" "*scratch*" "*Help*")
                    (seq "*" (zero-or-more anything)))
            eos))

  (defun my-next-buffer ()
    "Variant of `next-buffer' that skips `my-skippable-buffer-regexp'."
    (interactive)
    (my-change-buffer 'next-buffer))

  (defun my-previous-buffer ()
    "Variant of `previous-buffer' that skips `my-skippable-buffer-regexp'."
    (interactive)
    (my-change-buffer 'previous-buffer))

#+END_SRC

Other interesting functions.

#+BEGIN_SRC emacs-lisp
  
  (defun open-current-file-in-vim ()
    (interactive)
    (async-shell-command
     (format "foot nvim +%d %s"
             (+ (if (bolp) 1 0) (count-lines 1 (point)))
             (shell-quote-argument buffer-file-name))))


  (defun rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let* ((name (buffer-name))
           (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let* ((dir (file-name-directory filename))
               (new-name (read-file-name "New name: " dir)))
          (cond ((get-buffer new-name)
                 (error "A buffer named '%s' already exists!" new-name))
                (t
                 (let ((dir (file-name-directory new-name)))
                   (when (and (not (file-exists-p dir)) (yes-or-no-p (format "Create directory '%s'?" dir)))
                     (make-directory dir t)))
                 (rename-file filename new-name 1)
                 (rename-buffer new-name)
                 (set-visited-file-name new-name)
                 (set-buffer-modified-p nil)
                 (when (fboundp 'recentf-add-file)
                   (recentf-add-file new-name)
                   (recentf-remove-if-non-kept filename))
                 (message "File '%s' successfully renamed to '%s'" name (file-name-nondirectory new-name))))))))

  (defun google-this ()
    "Google the selected region if any, display a query prompt otherwise."
    (interactive)
    (browse-url
     (concat
      "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
      (url-hexify-string (if mark-active
                             (buffer-substring (region-beginning) (region-end))
                           (read-string "Google: "))))))

  (defun org-schedule-tomorrow ()
    "Org Schedule for tomorrow (+1d)."
    (interactive)
    (org-schedule t "+1d"))
#+END_SRC



* Default Paths

#+BEGIN_SRC emacs-lisp

  (add-to-list 'load-path "~/.config/emacs/packages/")
#+END_SRC


* Elpaca Plugin Manager

#+BEGIN_SRC emacs-lisp

  (require 'elpaca-setup)
#+END_SRC




* Plugins
** Catppuccin

#+BEGIN_SRC emacs-lisp

  (use-package catppuccin-theme
    :config
    (setq catppuccin-flavor 'mocha) ;; or 'latte, 'macchiato, or 'mocha
    (load-theme 'catppuccin :no-confirm)

    ;; Customization
    (catppuccin-set-color 'rosewater "#f5e0dc")
    (catppuccin-set-color 'flamingo "#f2cdcd")
    (catppuccin-set-color 'pink "#f5c2e7")
    (catppuccin-set-color 'mauve "#cba6f7")
    (catppuccin-set-color 'red "#f38ba8")
    (catppuccin-set-color 'maroon "#eba0ac")
    (catppuccin-set-color 'peach "#fab387")
    (catppuccin-set-color 'yellow "#f9e2af")
    (catppuccin-set-color 'green "#a6e3a1")
    (catppuccin-set-color 'teal "#94e2d5")
    (catppuccin-set-color 'sky "#89dceb")
    (catppuccin-set-color 'sapphire "#74c7ec")
    (catppuccin-set-color 'blue "#89b4fa")
    (catppuccin-set-color 'lavender "#b4befe")
    (catppuccin-set-color 'text "#cdd6f4")
    (catppuccin-set-color 'subtext1 "#bac2de")
    (catppuccin-set-color 'subtext0 "#a6adc8")
    (catppuccin-set-color 'overlay2 "#9399b2")
    (catppuccin-set-color 'overlay1 "#7f849c")
    (catppuccin-set-color 'overlay0 "#6c7086")
    (catppuccin-set-color 'surface2 "#585b70")
    (catppuccin-set-color 'surface1 "#45475a")
    (catppuccin-set-color 'surface0 "#313244")
    (catppuccin-set-color 'mantle "#0E0E16")
    (catppuccin-set-color 'crust "#0B0B11")
    (catppuccin-set-color 'base "#11111B")

    (catppuccin-reload)
    )
#+END_SRC

** Rainbow Mode

#+begin_src emacs-lisp

  (use-package rainbow-mode
    :config
    (rainbow-mode))
#+end_src

** Whichkey

#+begin_src emacs-lisp

  (use-package which-key
    :config
    ;; Set the time delay (in seconds) for the which-key popup to appear. A value of
    ;; zero might cause issues so a non-zero value is recommended.
    (setq which-key-idle-delay 0.1)

    ;; Set the maximum length (in characters) for key descriptions (commands or
    ;; prefixes). Descriptions that are longer are truncated and have ".." added.
    ;; This can also be a float (fraction of available width) or a function.
    (setq which-key-max-description-length 27)

    ;; Use additional padding between columns of keys. This variable specifies the
    ;; number of spaces to add to the left of each column.
    (setq which-key-add-column-padding 3)

    ;; The maximum number of columns to display in the which-key buffer. nil means
    ;; don't impose a maximum.
    (setq which-key-max-display-columns nil)

    ;; Set the separator used between keys and descriptions. Change this setting to
    ;; an ASCII character if your font does not show the default arrow. The second
    ;; setting here allows for extra padding for Unicode characters. which-key uses
    ;; characters as a means of width measurement, so wide Unicode characters can
    ;; throw off the calculation.
    (setq which-key-separator "  " )

    ;; Set the prefix string that will be inserted in front of prefix commands
    ;; (i.e., commands that represent a sub-map).
    (setq which-key-prefix-prefix " " )

    ;; Set the special keys. These are automatically truncated to one character and
    ;; have which-key-special-key-face applied. Disabled by default. An example
    ;; setting is
    ;; (setq which-key-special-keys '("SPC" "TAB" "RET" "ESC" "DEL"))
    (setq which-key-special-keys nil)

    ;; Show the key prefix on the left, top, or bottom (nil means hide the prefix).
    ;; The prefix consists of the keys you have typed so far. which-key also shows
    ;; the page information along with the prefix.
    (setq which-key-show-prefix 'nil)

    ;; Set to t to show the count of keys shown vs. total keys in the mode line.
    (setq which-key-show-remaining-keys nil)

    (which-key-setup-minibuffer)
    (which-key-mode))
#+end_src

** Avy

#+begin_src emacs-lisp

  (use-package avy)
#+end_src

** Devdocs

#+begin_src emacs-lisp

  (use-package devdocs)
#+end_src

** Evil
*** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-undo-system 'undo-fu)
    (setq evil-want-C-i-jump nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-d-scroll t)
    (setq evil-want-fine-undo t)
    (setq evil-want-Y-yank-to-eol t)

    ;; ----- Setting cursor colors
    (setq evil-emacs-state-cursor    '("#cba6f7" box))
    (setq evil-normal-state-cursor   '("#BAC2DE" box))
    (setq evil-operator-state-cursor '("#90b6f3" (bar . 6))) 
    (setq evil-visual-state-cursor   '("#6C7096" box))
    (setq evil-insert-state-cursor   '("#b4befe" (bar . 2)))
    (setq evil-replace-state-cursor  '("#eb998b" hbar))
    (setq evil-motion-state-cursor   '("#f38ba8" box))
    :config
    (evil-mode 1)
    ;; INITIAL BINDINGS
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    (evil-define-key 'motion help-mode-map "q" 'kill-this-buffer)
    )

#+END_SRC

*** Evil Collection
#+BEGIN_SRC emacs-lisp

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+END_SRC

*** Evil Commentary
#+BEGIN_SRC emacs-lisp

  (use-package evil-commentary)

#+END_SRC

*** Evil Escape
#+BEGIN_SRC emacs-lisp

  (use-package evil-escape
    :config
    (evil-escape-mode)
    :custom
    (evil-escape-key-sequence "jk")
    (evil-escape-delay 0.2))

#+END_SRC

*** Evil Surround
#+BEGIN_SRC emacs-lisp

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1)
    :after evil)

#+END_SRC

** Undo/Redo

#+begin_src emacs-lisp

  (use-package undo-fu)
  (use-package undo-fu-session
    :config
    (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
    (undo-fu-session-global-mode))


#+end_src

** Helpful

#+begin_src emacs-lisp

  (use-package helpful
    :config
    (setq counsel-describe-function-function #'helpful-callable)
    (setq counsel-describe-variable-function #'helpful-variable))

#+end_src

** General
*** Init

#+BEGIN_SRC emacs-lisp

  (use-package general
    :config

#+END_SRC

*** Global keys

#+BEGIN_SRC emacs-lisp

  (global-set-key [remap next-buffer] 'my-next-buffer)
  (global-set-key [remap previous-buffer] 'my-previous-buffer)

  (general-def
    "C-j" 'nil
    "C-k" 'nil)

  (general-def
    "M-p" 'popper-toggle-type
    "M-n" 'popper-cycle
    "M-," 'which-key-abort
    "M-S-n" 'popper-cycle-backwards
    "M-d" 'popper-kill-latest-popup
    "C-;" 'embark-become
    "C-<return>" 'embark-act
    "<escape>" 'keyboard-escape-quit)

#+END_SRC

*** Leader keys definitions

#+BEGIN_SRC emacs-lisp

  (general-create-definer e/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC"
    )


  (general-create-definer e/goto-keys
    :keymaps '(normal insert)
    :prefix "g"
    :global-prefix "C-g"
    )

#+END_SRC

*** Leader keys implementations

#+BEGIN_SRC emacs-lisp

  (e/leader-keys
    "SPC" '(execute-extended-command :which-key "  M-x  ")
    "k" '(lsp-ui-doc-glance :which-key "  hover  "))

  (e/leader-keys
    "c"  '(:ignore t :which-key "󰅱  code  ")
    "ca"  '(lsp-execute-code-action :which-key "  code actions  ")
    "cr"  '(lsp-rename :which-key "󰑕  rename symbol  ")
    "ce"  '(org-ctrl-c-ctrl-c :which-key "󰅱  execute code in org  ")
    "cs"  '(lsp-iedit-highlights :which-key "󰅱  execute code in org  ")
    "cS"  '(iedit-mode :which-key "󰅱  execute code in org  ")
    "cc"  '(compile :which-key "  format buffer  ")
    "cf"  '(format-all :which-key "  format buffer  ")
    "cF" '((lambda () (interactive) (indent-region (point-min) (point-max))) :wk "  format default  "))

  (e/leader-keys
    "a"  '(:ignore t :which-key "  avy  ")
    "aa" '(evil-avy-goto-word-1 :which-key "󰀫  avy char  ")
    "al" '(avy-goto-line :which-key "󰂶  avy line  ")
    "am"  '(:ignore t :which-key "  avy move  ")
    "aml" '(avy-move-line :which-key "󰂶  avy move line  "))

  (e/leader-keys
    "f"  '(:ignore t :which-key "󰈔  files  ")
    "ff" '(find-file :which-key "󰈞  find a file  ")
    "fr" '(consult-recent-file :which-key "󰣜  recent files  ")
    "fd" '(dired-jump :which-key "󰉓   open dired  ")
    "fi" '(evil-show-file-info :which-key "  file info  ")
    "fot" '(org-babel-tangle :which-key "󰗆  org tangle")
    "fn" '(org-roam-node-find :which-key "󰣜  find nodes  ")
    "fc"  '(:ignore t :which-key "󰈔  current file  ")
    "fcr"  '(rename-current-buffer-file :which-key "󰑕  rename current file  "))

  (e/leader-keys
    "o"  '(:ignore t :which-key "󰉋  org  ")
    "oe" '(e/org-babel-edit :which-key "󰕪  open agendas  ")
    "oa" '(org-agenda :which-key "󰕪   open agendas  ")
    "oc" '(org-capture :which-key "󰄄   open capture  ")
    "oi"  '(:ignore t :which-key "󰉋  org insert  ")
    "ois" '(org-schedule :which-key "󰾖   insert schedule  ")
    "oid" '(org-deadline :which-key "󰾕   insert deadline  ")
    "oil" '(org-insert-link :which-key "   insert link  ")
    "on" '(org-roam-node-insert :which-key "   insert link  ")
    "og"  '(org-roam-graph :which-key "󱁉  Open graph  "))

  (e/leader-keys
    "g"  '(:ignore t :which-key "  get  ")
    "gi" '(consult-imenu :which-key "󰮫  get imenu  ")
    "gf" '(list-faces-display :which-key " 󰙃  get faces")
    "gc" '(list-colors-display :which-key " 󰙃  get colors")
    "gk" '(consult-yank-from-kill-ring :which-key "  get kill ring and yank  "))

  (e/leader-keys
    "x"  '(:ignore t :which-key "󰃷  execute  ")
    "xr" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "  Reload emacs config  "))

  (e/leader-keys
    "i" '(:ignore t :which-key "󰡁  insert  ")
    "ii" '(nerd-icons-insert :which-key "󰭟   insert icons  ")
    "it" '(org-insert-time-stamp :which-key "   insert time stamp   ")
    )

  (e/leader-keys
    "b"  '(:ignore t :which-key "  buffer navigation  ")
    "bd" '(kill-buffer-and-window :which-key "󰆴  kill the current buffer and window  ")
    "bk" '(kill-some-buffers :which-key "󰛌  kill all other buffers and windows  ")
    "bn" '(next-buffer :which-key "󰛂   switch buffer  ")
    "bp" '(previous-buffer :which-key "󰛁   switch buffer  ")
    "bb" '(consult-buffer :which-key "󰕰  view buffers  "))


  (e/leader-keys
    "s"  '(:ignore t :which-key "  search  ")
    "ss" '(consult-line :which-key "󰱼  line search  ")
    "sr" '(consult-ripgrep :which-key "󰟥   search with rg  ")
    "sp" '(consult-fd :which-key "   search with fd  ")
    "sd" '(dictionary-search :which-key "  search in dictionary  "))

  (e/leader-keys
    "e"  '(:ignore t :which-key "󰈈   evaluate  ")
    "eb" '(eval-buffer :which-key "󰷊  evaluate buffer  ")
    "ee" '(eval-last-sexp :which-key "󰷊  evaluate last expression  ")
    "er" '(eval-region :which-key "󰨺  evaluate region  "))

  (e/leader-keys
    "h"  '(:ignore t :which-key "󰞋   help  ")
    "ht" '(helpful-at-point :which-key "  describe this  ")
    "hF" '(describe-face :which-key "󱗎  describe face  ")
    "hf" '(helpful-function :which-key "󰯻  describe function  ")
    "hh" '(devdocs-lookup :which-key "󰯻  describe function  ")
    "hb" '(embark-bindings :which-key "󰌌  describe bindings  ")
    "hk" '(helpful-key :which-key "󰯻  describe this key  ")
    "hv" '(helpful-variable :which-key "  describe variable  ")
    "hrb" '(revert-buffer-quick :which-key "󰄸  reload buffer  "))

  (e/leader-keys
    "t"  '(:ignore t :which-key "   toggles/switches  ")
    "tt"  '(toggle-truncate-lines :which-key "󰖶  toggle word wrap mode  ")
    "tv" '(visual-line-mode :which-key "  visual line mode ")
    "tR" '(read-only-mode :which-key "󰑇  read only mode  ")
    "tc"  '(:ignore t :which-key "󰮫  toggle completion  ")
    "tce" '((lambda () (interactive) (setq-default corfu-auto t) (corfu-mode 1)) :wk "   enable  ")
    "tcd" '((lambda () (interactive) (setq-default corfu-auto nil) (corfu-mode 1)) :wk "   disable  ")
    "tr"  '(org-roam-buffer-toggle :which-key "  Roam Buffer  ")
    "tm"  '(minimap-mode :which-key "󰍍  minimap toggles  "))

  (e/goto-keys
    "cc" #'evil-commentary-line
    "ca" (lambda () (interactive) (comment-indent) (just-one-space) (evil-append-line 1))
    "n"  '(flymake-goto-next-error :which-key " next error")
    "p"  '(flymake-goto-prev-error :which-key " prev error"))


#+END_SRC

*** Evil Mode
**** Normal State

#+begin_src emacs-lisp

  (general-def
    :keymaps 'evil-normal-state-map
    "M-d"  '(duplicate-dwim :which-key "  code duplicate  ")
    "C-u" #'evil-scroll-up
    "C-d" #'evil-scroll-down
    "C-s" (lambda () (interactive) (evil-ex "%s/"))
    "C-l" 'clear
    "C-n" 'lsp-ui-find-next-reference
    "C-S-n" 'lsp-ui-find-prev-reference
    "RET" 'org-open-at-point-global
    "M-k" 'drag-stuff-up
    "M-j" 'drag-stuff-down
    "M-h" 'drag-stuff-left
    "M-l" 'drag-stuff-right
    "C-/" #'consult-line-multi
    )

#+end_src

**** Insert State

#+begin_src emacs-lisp

  (general-def
    :keymaps 'evil-insert-state-map
    "C-h" 'nil
    "C-l" 'completion-at-point
    "C-i" 'lsp-signature-toggle-full-docs
    "C-f" 'find-file-at-point
    "TAB" 'tempo-complete-tag
    )

#+end_src

**** Visual State

#+begin_src emacs-lisp

  (general-def
    :keymaps 'evil-visual-state-map
    "gc" #'evilnc-comment-or-uncomment-lines
    ;; "C-k" 'corfu-previous
    ;; "C-j" 'corfu-next
    ;; "C -." 'yas-expand
    )

#+end_src

**** Motion State

#+begin_src emacs-lisp
  
  (general-def
    :keymaps 'evil-motion-state-map
    "K" 'nil
    )

#+end_src

*** Org Mode

#+begin_src emacs-lisp

  (general-def
    :keymaps 'org-mode-map
    "C-h" 'nil
    "C-S-h" 'nil
    )

#+end_src

*** Dired Mode

#+begin_src emacs-lisp

  (evil-collection-define-key 'normal 'dired-mode-map
    "l" 'dired-find-alternate-file
    "h" 'dired-up-directory
    "c" 'dired-create-empty-file
    "Q" 'kill-buffer-and-window
    )
#+end_src

*** Other Modes

#+BEGIN_SRC emacs-lisp

  (general-def
    :keymaps 'vertico-map
    "C-l" '(lambda () (interactive) (vertico-insert) )
    "C-S-l" '(lambda () (interactive) (vertico-insert) (minibuffer-force-complete-and-exit))
    "C-k" #'vertico-next
    "C-j" #'vertico-previous
    "C-h" #'vertico-directory-up
    )

  (general-def
    :keymaps 'corfu-map
    "C-k" 'corfu-previous
    "C-j" 'corfu-next
    "C-l" 'completion-at-point
    "C-h" 'corfu-quit
    )
#+END_SRC

*** End block

#+BEGIN_SRC emacs-lisp

  ;; NOTE: =Information on general=

  ;; INFO:  Mode specific maps
  ;; (general-def org-mode-map
  ;;   "C-c C-q" 'counsel-org-tag
  ;;   ;; ...
  ;;   )

  ;; INFO: normal maps
  ;; (general-define-key
  ;;  "M-x" 'amx
  ;;  "C-s" 'counsel-grep-or-swiper)

  ;; INFO: prefix
  ;; (general-define-key
  ;;  :prefix "C-c"
  ;;  ;; bind "C-c a" to 'org-agenda
  ;;  "a" 'org-agenda
  ;;  "b" 'counsel-bookmark
  ;;  "c" 'org-capture)

  ;; INFO: Swap!
  ;; (general-swap-key nil 'motion
  ;;   ";" ":")
  )

#+END_SRC

** Org Modern

#+BEGIN_SRC emacs-lisp

  (use-package org-modern
    :hook (org-mode . org-modern-mode)
    :config
    (setq
     ;; org-modern-star '("＊" "  ＊" "    ＊" "      ＊")
     org-modern-star '( "" "  " "    " "      ")
     org-modern-list '((42 . "◦") (43 . "•") (45 . "–"))
     org-modern-block-name nil
     org-modern-keyword nil
     org-modern-todo t
     org-modern-table nil)
    (set-face-attribute 'org-modern-done nil :foreground dim-fgcolor :background bgcolor :weight 'bold :slant 'normal :height 130 :inherit 'nil)
    (set-face-attribute 'org-modern-todo nil :background darker-bgcolor :foreground blue-color :weight 'bold :height 130 :inherit 'nil)
    (set-face-attribute 'org-modern-time-inactive nil :foreground dim-fgcolor :background darker-bgcolor :height 130 :inherit 'nil)
    (set-face-attribute 'org-modern-time-inactive nil :foreground dim-fgcolor :background grim-bgcolor :height 130 :inherit 'nil)
    (set-face-attribute 'org-modern-time-active nil :background dim-fgcolor :foreground darker-bgcolor :height 130 :inherit 'nil)

    )

#+END_SRC

** Org Roam

#+begin_src emacs-lisp

  ;; ROAM
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/Documents/notes"))
    (org-roam-db-autosync-mode)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "${slug}.org" "#+title: ${title}\n#+Author:Adarsha Acharya")
        :unnarrowed t)
       ;; ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
       ;; 	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
       ;; 	:unnarrowed t)
       ))
    :config
    (org-roam-setup))

#+end_src

** Org Capture

#+begin_src emacs-lisp

  (setq org-capture-templates
        ;;	`(("t" "Tasks / Projects")
        ;;		("tt" "Task" entry (file+olp "~/Documents/notes/home.org" "Inbox")
        ;;		 "* TODO %?\n  %i")
        ;;		("th" "Homework" entry (file+olp "~/Documents/notes/home.org" "Inbox")
        ;;		 "* TODO %?\n  %i")))
        `(("t" "Task" entry (file+olp "~/Documents/notes/home.org" "Inbox")
           "* TODO %?\n  %i")
          ("h" "Homework" entry (file+olp "~/Documents/notes/home.org" "Inbox")
           "* TODO %?\n  %i")))

#+end_src

** Evil Org

#+begin_src emacs-lisp

  (use-package evil-org
    :diminish evil-org-mode
    :after org
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda () (evil-org-set-key-theme))))

#+end_src

** Popper

#+begin_src emacs-lisp

  (use-package popper
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "\\*gud-test\\*"
            "Output\\*$"
            "\\*Warnings\\*"
            help-mode
            compilation-mode))
    (popper-mode +1))

#+end_src

** Org Visual fill

#+begin_src emacs-lisp

  (use-package visual-fill-column
    :config

    (defun org-mode-visual-fill ()
      (setq visual-fill-column-width 150
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

    :hook (org-mode . org-mode-visual-fill))


#+end_src

** Org Appear

#+begin_src emacs-lisp

  (use-package org-appear
    :config
    ;; Hide org markup
    (setq-default org-hide-emphasis-markers t)
    (add-hook 'org-mode-hook 'org-appear-mode)
    )
#+end_src

** LSP 
*** LSP mode

#+begin_src emacs-lisp

  (use-package lsp-mode
    :init
#+END_SRC			

The one additional feature we have used below is Cape’s cape-capf-buster. This isn’t entirely necessary, but it gives some nicer behavior when you alter the original text during completion (e.g. while completing get, you delete back to ge).

#+begin_src emacs-lisp
  
  (defun my/orderless-dispatch-flex-first (_pattern index _total)
    (and (eq index 0) 'orderless-flex))

  (defun my/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless)))

  (add-hook 'orderless-style-dispatchers #'my/orderless-dispatch-flex-first nil 'local)
  (setq-local completion-at-point-functions (list (cape-capf-buster #'lsp-completion-at-point)))

  :hook ((prog-mode . lsp-deferred)
         (lsp-completion-mode . my/lsp-mode-setup-completion))

  :config
  (setq lsp-print-performance t)
  (setq lsp-ui-doc-enable nil)
  (setq lsp-ui-doc-show-with-cursor nil)
  (setq lsp-ui-doc-show-with-mouse nil)
  (setq lsp-lens-enable nil)
  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-ui-sideline-enable nil)
  (setq lsp-ui-sideline-show-code-actions nil)
  (setq lsp-ui-sideline-show-hover nil)
  (setq lsp-diagnostics-provider :flymake)
  (setq lsp-ui-sideline-enable nil)     ; To disable the entire sideline
  (setq lsp-modeline-code-actions-enable nil)
  (setq lsp-modeline-diagnostics-mode nil)
  (setq lsp-ui-sideline-enable nil)
  (setq lsp-ui-sideline-show-diagnostics nil)
  (setq lsp-eldoc-enable-hover nil)     ; Eldoc
  (setq lsp-signature-auto-activate nil) ;; you could manually request them via `lsp-signature-activate`
  (setq lsp-signature-render-documentation nil)
  (lsp-completion-provider :none) ;; we use Corfu!
  (setq lsp-completion-show-detail nil)

  (setq lsp-ui-doc-frame-parameters
        '((left . -1)
          (no-focus-on-map . t)
          (min-width  . 0)
          (width  . 0)
          (min-height  . 0)
          (height  . 0)
          (internal-border-width . 15)
          (vertical-scroll-bars . nil)
          (horizontal-scroll-bars . nil)
          (right-fringe . 0)
          (menu-bar-lines . 0)
          (tool-bar-lines . 0)
          (tab-bar-lines . 0)
          (tab-bar-lines-keep-state . 0)
          (line-spacing . 0)
          (unsplittable . t)
          (undecorated . t)
          (bottom . -1)
          (visibility . nil)
          (mouse-wheel-frame . nil)
          (no-other-frame . t)
          (inhibit-double-buffering . t)
          (drag-internal-border . t)
          (no-special-glyphs . t)
          (desktop-dont-save . t)))

  :commands (lsp lsp-deferred))

#+end_src

*** LSP UI

#+begin_src emacs-lisp
  
  (use-package lsp-ui
    :config
    (setq lsp-ui-doc-position 'at-point)
    (setq lsp-ui-doc-border darker-bgcolor)
    )
#+end_src

** Iedit

#+begin_src emacs-lisp

  (use-package iedit)
#+end_src

** Posframe

#+BEGIN_SRC  emacs-lisp

  (use-package posframe)
#+END_SRC

** Completion
*** Vertico

#+begin_src emacs-lisp

  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)
    (vertico-reverse-mode)
    ;; Different scroll margin
    (setq vertico-scroll-margin 2)

    ;; Show more candidates
    (setq vertico-count 10)

    ;; Grow and shrink the Vertico minibuffer
    (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)

    (add-hook 'minibuffer-mode-hook (lambda () (interactive)
                                      (setq-local face-remapping-alist '((default minibuffer-face))))))

#+end_src

*** Consult

#+begin_src emacs-lisp

  (use-package consult
    :init
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    (advice-add #'register-preview :override #'consult-register-window)
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    :config
    (add-to-list 'consult-buffer-filter "\*.*\*")

    ;; Allowing single key press to begin asynchorous searches like consult-grep
    (setq consult-async-min-input 1)

    (consult-customize
     consult-theme consult-buffer :preview-key '(:debounce 0.2 any)
     consult-recent-file :preview-key "C-h"
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    (setq consult-narrow-key "<") ;; "C-+"
    )

#+end_src

*** Orderless

#+begin_src emacs-lisp

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-cycle-threshold 0
          completion-category-overrides '((file (styles partial-completion)))))

#+end_src

*** Marginalia

#+begin_src emacs-lisp

  (use-package marginalia
    :config
    (marginalia-mode -1)
    )
#+end_src

*** Embark

#+BEGIN_SRC  emacs-lisp

  (use-package embark)
  (use-package embark-consult)

#+END_SRC

*** Corfu
**** Config

#+begin_src emacs-lisp

  (use-package corfu
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-separator ?\s)          ;; Orderless field separator
    (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    (corfu-quit-no-match t)      ;; Never quit, even if there is no match
    (corfu-preview-current nil)    ;; Disable current candidate preview
    (corfu-preselect 'first)      ;; Preselect the prompt
    (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    (corfu-scroll-margin 5)        ;; Use scroll margin
    (corfu-minimum-width 100)        ;; Use scroll margin
    (corfu-maximum-width 190)        ;; Use scroll margin
    (corfu-auto-prefix 1)
    (corfu-auto-delay 0.3)
    (corfu-popupinfo-delay '(2.0 . 1.0))

    :config
    (corfu-popupinfo-mode 1)
    (corfu-history-mode 1))

  (setq corfu--frame-parameters '((no-accept-focus . t)
                                  (no-focus-on-map . t)
                                  (min-width . t)
                                  (min-height . t)
                                  (border-width . 0)
                                  (child-frame-border-width . 10)
                                  (left-fringe . 0)
                                  (right-fringe . 0)
                                  (vertical-scroll-bars)
                                  (horizontal-scroll-bars)
                                  (menu-bar-lines . 0)
                                  (tool-bar-lines . 0)
                                  (tab-bar-lines . 0)
                                  (no-other-frame . t)
                                  (unsplittable . t)
                                  (undecorated . t)
                                  (cursor-type)
                                  (no-special-glyphs . t)
                                  (desktop-dont-save . t)))

#+end_src

**** Cape

#+begin_src emacs-lisp

  ;; Add extensions
  (use-package cape
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev 5)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-history)
    ;; (add-to-list 'completion-at-point-functions #'cape-keyword)
    ;; (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    ;; (add-to-list 'completion-at-point-functions #'cape-line)
    )

#+end_src

**** Hooks

#+begin_src emacs-lisp

  (add-hook 'eshell-mode-hook
            (lambda ()
              (setq corfu-auto t)                 ;; Enable auto completion
              (setq-local corfu-auto nil)
              (corfu-mode)))

  (add-hook 'prog-mode-hook
            (lambda ()
              (setq corfu-auto t)                 ;; Enable auto completion
              (corfu-mode)))

  (add-hook 'org-mode-hook
            (lambda ()
              (setq corfu-auto nil)                 ;; Enable auto completion
              (corfu-mode)))

  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input)
                (eq (current-local-map) read-passwd-map))
      (setq-local corfu-auto nil) ;; Enable/disable auto completion
      (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                  corfu-popupinfo-delay nil)
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

#+end_src

** Icons

#+begin_src emacs-lisp

  (use-package nerd-icons
    :config
    :if (display-graphic-p))

  (use-package nerd-icons-completion
    :config
    (nerd-icons-completion-mode)
    )

  (use-package nerd-icons-dired
    :hook
    (dired-mode . nerd-icons-dired-mode)) 

#+end_src

** Dap Mode

#+begin_src emacs-lisp

  (use-package dap-mode)

#+end_src

** Plugins END

#+BEGIN_SRC emacs-lisp

  (elpaca-wait)

#+END_SRC




* Custom Packages
** Flymake Posframe

#+BEGIN_SRC  emacs-lisp

  (require 'flymake-posframe)
  (add-hook 'prog-mode-hook (lambda () (interactive) 
                              (flymake-posframe-mode 1)))
  (setq flymake-posframe-error-prefix "󰚌 ")
  (setq flymake-posframe-warning-prefix " ")
  (setq flymake-posframe-note-prefix "󰠮 ")

#+END_SRC



* Org Mode Config
** Org Src

#+begin_src emacs-lisp

  ;; How is a buffer opened when calling `org-edit-special'.
  (setq org-src-window-setup 'current-window)

  (defun e/org-babel-edit ()
    "Edit python src block with lsp support by tangling the block and
  then setting the org-edit-special buffer-file-name to the
  absolute path. Finally load the lsp."
    (interactive)

    ;; org-babel-get-src-block-info returns lang, code_src, and header
    ;; params; Use nth 2 to get the params and then retrieve the :tangle
    ;; to get the filename
    (setq mb/tangled-file-name (expand-file-name (assoc-default :tangle (nth 2 (org-babel-get-src-block-info)))))

    ;; tangle the src block at point
    (org-babel-tangle '(4))
    (org-edit-special)

    ;; Now we should be in the special edit buffer with python-mode. Set
    ;; the buffer-file-name to the tangled file so that pylsp and
    ;; plugins can see an actual file.
    (setq-local buffer-file-name mb/tangled-file-name)
    (lsp)
    )

#+end_src

** Org Agenda
*** Defaults

#+begin_src emacs-lisp

  (setq org-agenda-files '("~/Documents/notes/home.org")
        org-agenda-breadcrumbs-separator " ❱ "
        org-directory "~/Documents/")
  (setq org-agenda-hidden-separator "‌‌ ")
  (setq org-agenda-block-separator (string-to-char " "))
  (setq org-agenda-format-date 'my-org-agenda-format-date-aligned)
  (setq org-agenda-block-separator nil)

#+end_src

*** Custom Commands 

#+begin_src emacs-lisp

  (setq org-agenda-custom-commands
        '(
          ("a" "My Agenda"
           (
            (agenda "" (
                        (org-agenda-skip-scheduled-if-done nil)
                        (org-agenda-time-leading-zero t)
                        (org-agenda-timegrid-use-ampm nil)
                        (org-agenda-skip-timestamp-if-done t)
                        (org-agenda-skip-deadline-if-done t)
                        (org-agenda-start-day "+0d")
                        (org-agenda-span 5)
                        (org-agenda-overriding-header " Calendar")
                        (org-agenda-repeating-timestamp-show-all nil)
                        (org-agenda-remove-tags t)
                        ;; (org-agenda-prefix-format "%i %?-2 t%s")
                        (org-agenda-prefix-format "  %?-2 t%s")
                        ;; (concat "  %-3i  %-15b %t%s" org-agenda-hidden-separator)
                        (org-agenda-todo-keyword-format " ☐ ")
                        ;; (org-agenda-todo-keyword-format "")
                        (org-agenda-time)
                        (org-agenda-current-time-string "────────── Now ")
                        (org-agenda-scheduled-leaders '("" ""))
                        (org-agenda-deadline-leaders '("Deadline:  " "In %3d d.: " "%2d d. ago: "))
                        (org-agenda-time-grid (quote ((today require-timed remove-match) () "      " "─────────────")))))

            (tags "-CATEGORY=\"work\"+TODO=\"TODO\"|-CATEGORY=\"work\"+TODO=\"DONE\"" (
                                                                                       (org-agenda-overriding-header "\n Today")
                                                                                       (org-agenda-sorting-strategy '(priority-down))
                                                                                       (org-agenda-remove-tags t)
                                                                                       (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp 'scheduled))
                                                                                       ;; (org-agenda-todo-ignore-scheduled 'all)
                                                                                       (org-agenda-prefix-format "   %-2i ")
                                                                                       ;; (org-agenda-todo-keyword-format "")
                                                                                       ))

            (tags "-CATEGORY=\"work\"+TODO=\"NEXT\"" (
                                                      (org-agenda-overriding-header " Next")
                                                      (org-agenda-sorting-strategy '(priority-down))
                                                      (org-agenda-remove-tags t)
                                                      ;; (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))
                                                      (org-agenda-todo-ignore-scheduled 'all)
                                                      (org-agenda-prefix-format "   %-2i %?b")
                                                      (org-agenda-todo-keyword-format "")))


            (tags "+project-CATEGORY=\"work\"" (
                                                (org-agenda-overriding-header " Projects")
                                                (org-agenda-remove-tags t)
                                                (org-tags-match-list-sublevels nil)
                                                (org-agenda-show-inherited-tags nil)
                                                (org-agenda-prefix-format "   %-2i %?b")
                                                (org-agenda-todo-keyword-format "")))
            ))
          ))

#+end_src

** Miscelleneous

#+begin_src emacs-lisp

  (setq org-ellipsis "  ")

  (defun org-config (frame)
    "Configure Org mode things. Intended for `after-make-frame-functions'."
    (setq org-agenda-start-with-log-mode nil)
    (setq org-log-done 'nil)
    (setq org-agenda-span 10)
    (setq org-agenda-start-on-weekday nil)
    (setq org-log-into-drawer t)
    )
  (add-hook 'after-make-frame-functions 'org-config)

#+end_src

** Hooks

#+begin_src emacs-lisp

  (add-hook 'org-mode-hook (lambda ()
                             (fringe-mode '(0 . 0))
                             (variable-pitch-mode 1)))
#+end_src

** Org tempo

#+BEGIN_SRC emacs-lisp
  
  (require 'org-tempo)

  ;; ShortCuts
  (add-to-list 'org-structure-template-alist '("sh" . "src shell :results verbatim"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp \n "))
  (add-to-list 'org-structure-template-alist '("py" . "src python :results output \n"))
  (add-to-list 'org-structure-template-alist '("cpp" . "src C++ :results verbatim \n\n  #include <iostream>\n  using namespace std;\n\n  int main(){\n    return 0;\n}"))

#+END_SRC




* Styling
** Default

#+BEGIN_SRC emacs-lisp

  (add-to-list 'default-frame-alist '(font . "Iosevka Nerd Font Medium"))
  (defun configure-font (frame)
    "Configure font given initial non-daemon FRAME.
   Intended for `after-make-frame-functions'."
    (set-face-attribute 'default nil :font "Iosevka Nerd Font Medium" :height 150)
    (set-face-attribute 'fixed-pitch nil :font "Iosevka Nerd Font Medium" :height 150)
    (set-face-attribute 'variable-pitch nil :font "Barlow SemiCondensed" :height 170)
    (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
    (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
    (set-face-attribute 'line-number nil :font "Iosevka Nerd Font Bold" :height 120)
    (set-face-attribute 'link nil :background darker-bgcolor :slant 'normal  :weight 'regular :overline 'nil :underline 'nil :family "Abel")
    (set-face-attribute 'show-paren-match nil :foreground mauve-color :underline 't)
    (set-face-attribute 'show-paren-match-expression nil :background grim-bgcolor :foreground 'unspecified :inherit 'nil)
    (set-face-attribute 'help-key-binding nil :font "Barlow SemiCondensed" :weight 'semibold :background darker-bgcolor :foreground dim-fgcolor :box 'nil)
    (set-face-attribute 'header-line nil :background bgcolor :foreground dim-fgcolor))

  (add-hook 'after-make-frame-functions #'configure-font)

#+end_src

** Evil

#+BEGIN_SRC emacs-lisp

  (defun configure-evil-font (frame)
    "Configure font given initial non-daemon FRAME.
   Intended for `after-make-frame-functions'."
    (set-face-attribute 'evil-ex-info nil :foreground red-color :slant 'oblique :family "Barlow Semi Condensed" )
    (set-face-attribute 'evil-ex-substitute-matches nil :background blue-color :foreground darker-bgcolor :strike-through 't :underline 'nil )
    (set-face-attribute 'evil-ex-substitute-replacement nil :background teal-color :foreground darker-bgcolor :underline 'nil ))

  (add-hook 'after-make-frame-functions #'configure-evil-font)


#+END_SRC

** Org mode

#+BEGIN_SRC emacs-lisp

  (defun configure-org-font ()
    "Configure font given initial non-daemon FRAME.
   Intended for `after-make-frame-functions'."
    (set-face-attribute 'org-block nil :background darker-bgcolor :font "Iosevka Nerd Font Medium")
    (set-face-attribute 'org-verbatim nil :background 'unspecified :foreground dim-fgcolor :inherit 'fixed-pitch)
    (set-face-attribute 'org-block-end-line nil :background darker-bgcolor)
    (set-face-attribute 'org-block-begin-line nil :background darker-bgcolor)
    (set-face-attribute 'org-meta-line nil :slant 'normal :height 100)
    (set-face-attribute 'org-level-1 nil :height 235 :family "Barlow SemiCondensed" :weight 'regular :foreground lavender-color)
    (set-face-attribute 'org-level-2 nil :height 220 :family "Barlow SemiCondensed" :weight 'regular :foreground lavender-color)
    (set-face-attribute 'org-level-3 nil :height 205 :family "Barlow SemiCondensed" :weight 'regular :foreground blue-color)
    (set-face-attribute 'org-level-4 nil :height 190 :family "Barlow SemiCondensed" :weight 'regular :foreground blue-color)
    (set-face-attribute 'org-level-5 nil :height 190 :family "Barlow SemiCondensed" :weight 'regular :foreground blue-color)
    (set-face-attribute 'org-level-6 nil :height 190 :family "Barlow SemiCondensed" :weight 'regular :foreground blue-color)
    (set-face-attribute 'org-level-7 nil :height 190 :family "Barlow SemiCondensed" :weight 'regular :foreground blue-color)
    (set-face-attribute 'org-level-8 nil :height 190 :family "Barlow SemiCondensed" :weight 'regular :foreground blue-color)
    (set-face-attribute 'org-table nil :background darker-bgcolor :inherit 'fixed-pitch)

    (set-face-attribute 'org-document-title nil :height 260 :font "Abel")
    (set-face-attribute 'org-ellipsis nil :slant 'normal :foreground dim-fgcolor)
    (set-face-attribute 'org-done nil :slant 'normal :strike-through 't :foreground dim-fgcolor)

    (set-face-attribute 'org-agenda-date nil :font "Abel" :weight 'regular :height 200 :foreground pink-color)
    (set-face-attribute 'org-agenda-date-today nil :font "Barlow SemiCondensed" :weight 'semibold :height 200 )
    (set-face-attribute 'org-agenda-done nil :font "Abel" :weight 'regular :height 190 :strike-through 't)
    (set-face-attribute 'org-agenda-structure nil :font "Abel" :weight 'regular :height 230 :foreground blue-color)
    )

  (add-hook 'org-mode-hook #'configure-org-font)

#+END_SRC

** LSP

#+BEGIN_SRC emacs-lisp

  (defun configure-lsp-font (frame)
    "Configure font given initial non-daemon FRAME.
     Intended for `after-make-frame-functions'."

#+END_SRC

*** LSP UI

#+BEGIN_SRC emacs-lisp

  (set-face-attribute 'lsp-ui-doc-background nil :background darker-bgcolor )
  (set-face-attribute 'lsp-face-highlight-textual nil :foreground 'unspecified :background grim-fgcolor :inherit 'nil)
  (set-face-attribute 'lsp-face-highlight-write nil :foreground 'unspecified :background grim-fgcolor :inherit 'nil)
  (set-face-attribute 'lsp-face-highlight-read nil :foreground 'unspecified :background grim-fgcolor :inherit 'nil)

#+END_SRC

*** Flymake

#+BEGIN_SRC emacs-lisp

  (set-face-attribute 'flymake-error nil :background "#42232c" :foreground "#F38BA8" :underline 'nil :weight 'bold)
  (set-face-attribute 'flymake-note nil :background "#262d25" :foreground "#A6E3A1" :underline 'nil :weight 'bold)
  (set-face-attribute 'flymake-warning nil :background "#453e29" :foreground "#F8D782" :underline 'nil :weight 'bold)

  (set-face-attribute 'flymake-posframe-background-face nil :background darker-bgcolor :foreground calm-fgcolor :weight 'bold)
  (set-face-attribute 'flymake-posframe-foreground-face nil :background darker-bgcolor :foreground calm-fgcolor :weight 'bold)

  (set-face-attribute 'flymake-posframe-error-face nil :background darker-bgcolor :foreground red-color :weight 'bold)
  (set-face-attribute 'flymake-posframe-warning-face nil :background darker-bgcolor :foreground orange-color :weight 'bold)
  (set-face-attribute 'flymake-posframe-note-face nil :background darker-bgcolor :foreground teal-color :weight 'bold)

#+END_SRC

*** End Block

#+BEGIN_SRC emacs-lisp
  
  )

  (add-hook 'after-make-frame-functions #'configure-lsp-font)

#+END_SRC

** Vertico

#+BEGIN_SRC emacs-lisp

  (defun configure-vertico-font (frame)
    "Configure font given initial non-daemon FRAME.
   Intended for `after-make-frame-functions'."
    (set-face-attribute 'vertico-current nil :foreground blue-color :weight 'semibold :background grim-bgcolor :family "Barlow SemiCondensed")
    (set-face-attribute 'vertico-multiline nil :height 170 :family "Barlow SemiCondensed")
    (set-face-attribute 'minibuffer-prompt nil :foreground mauve-color :weight 'semibold :background bgcolor :height 190 :family "Barlow SemiCondensed")
    (set-face-attribute 'marginalia-documentation nil :family "Barlow SemiCondensed" :slant 'normal :weight 'regular)
    )

  (add-hook 'after-make-frame-functions #'configure-vertico-font)

#+END_SRC

** Corfu

#+BEGIN_SRC emacs-lisp

  (defun configure-corfu-font (frame)
    "Configure font given initial non-daemon FRAME.
     Intended for `after-make-frame-functions'."

    (set-face-attribute 'corfu-default nil :height 150 :background darker-bgcolor :foreground dim-fgcolor :weight 'semibold :family "Iosevka Nerd Font")
    (set-face-attribute 'corfu-current nil :height 150 :foreground calm-fgcolor :background bgcolor :weight 'semibold :family "Iosevka Nerd Font")
    (set-face-attribute 'corfu-annotations nil :height 150 :foreground grim-fgcolor :weight 'semibold :family "Iosevka Nerd Font")

    )

  (add-hook 'after-make-frame-functions #'configure-corfu-font)

#+END_SRC
